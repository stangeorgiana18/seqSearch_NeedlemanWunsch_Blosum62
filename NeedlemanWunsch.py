import numpy as np

def NeedlemanWunschAlgorithm(seq1, seq2):

    seq1 = seq1.replace("\n","")
    seq2 = seq2.replace("\n","")

    seq1_length = len(seq1)
    seq2_length = len(seq2)

    # create matrices
    mainMatrix = np.zeros((seq1_length+1, seq2_length+1))
    matchCheckerMatrix = np.zeros((seq1_length, seq2_length))

    # scores for match, mismatch and gap - left or above
    match_add = 1
    mismatch_substract = -1
    gap = -2

    # fill the matchCheckerMatrix according to match or mismatch
    for i in range(seq1_length):
        for j in range(seq2_length):
            if seq1[i] == seq2[j]:
                matchCheckerMatrix[i][j] = match_add
            else:
                matchCheckerMatrix[i][j] = mismatch_substract

    # use the Needleman Wunsch algorithm
    # initialise first columns and row with gap * number of column/row
    for i in range(seq1_length+1):
        mainMatrix[i][0] = i * gap
    for j in range(seq2_length+1):
        mainMatrix[0][j] = j * gap

    # fill the matrix 
    for i in range(1, seq1_length+1):
        for j in range(1, seq2_length+1):
            mainMatrix[i][j] = max(mainMatrix[i-1][j]+gap, mainMatrix[i][j-1]+gap, mainMatrix[i-1][j-1] + matchCheckerMatrix[i-1][j-1])

    # print(mainMatrix)

    # get the path - back trace 
    align1 = ""
    align2 = ""
    traceback_i = seq1_length
    traceback_j = seq2_length

    while(traceback_i > 0 and traceback_j > 0):
        # calculus along the diagonal
        if (traceback_i > 0 and traceback_j > 0 and mainMatrix[traceback_i][traceback_j] == mainMatrix[traceback_i-1][traceback_j-1] + matchCheckerMatrix[traceback_i-1][traceback_j-1]):
            align1 += seq1[traceback_i-1]
            align2 += seq2[traceback_j-1]
            
            traceback_i -= 1
            traceback_j -= 1
            
        elif (traceback_i > 0 and mainMatrix[traceback_i][traceback_j] == mainMatrix[traceback_i - 1][traceback_j] + gap):
                align1 += seq1[traceback_i-1]
                align2 += "-"
                traceback_i -= 1
        else:
            align1 += "-"
            align2 += seq2[traceback_j-1]
            traceback_j -= 1

    return align1, align2
            

genes = """CCCAAGCACTGCTTATTAATTACAAACCACCTTCTCATCTCTTGCTCTTCAACTTAGCACTAGACAGAAT
CTAGCTTCAAACCTAATTAAGGTGAGTGAGTCTTGTACTTGATCCACTCTTGATATTCATGCCCTCACTT
TCTTTCTCACTTACTATGTGTTTGTGGATATGTCTGAATTAATGATGATTCAACTCACTTAACTGATCAT
GTCAAATTACAGGTACTTAATTGGATCAGCTAGCATGGAATATGGTTCATTACTAGTGCAGCAGCAGCAG
CAGCAGGATTGTAATTCTGCCTATGGGAGCTTGTCTAATTTATCATCAGACTGTGGATCAGTGACAACAG
CAGAAGCAGATCATCACATCATTGAGGAGCTGTTAGTACAAGGTTGCTGGGTGGAAGTTAGTGGTGTTGG
TGTTAGGGAGGGTGAGCTCCAGCTCCAACAAGACGAATCAAGTTTTGTGGTGGGGAAGAGATGGTGGATT
GGACCAGCTGCAGCAGTAGCAGGATCATGTAATTCCTCTGTCAAAGAGAGACTAGTGATTGCTGTTGGGT
ACTTGAAAGACTACACAAGAAACTCCAACGTGCTCATTCAGATATGGGTGCCCTTACGAAGAGGCATCCT
TCATGATCATGATTACCACACAAATTATTTACTTTCCAATAATCCTCCTCCTCAACCAGAAGCAGCAGCA
GATCATGAATCTGTTTCACTTGGTTTTCCCATGCCAGCAGCTCCCAACTCAAACTTATACTCAAACGTGC
ACGTCCGTTTTTTTAGAAGCCACGAGTACCCGCGCGTTCAGGCTCAGCAGTATGGATCTTTAGCCCTTCC
TGTCTTCGAAAGAGGCACCGGGACATGCCTTGGTGTCCTTGAGATTGTAATCACCAACCAAACCACCATC
AACTACAATGTCTCCAATGCTCTTGATCAGGTACCTAGCTACTTTACTTGATTACTTTTCTTCTATCTAC
TCCCAATATTTCAGTAAAATGTGGTACTGATTATCACTTCAATAACCGCTCACACTTACAAGCCTTTTGT
ATCCAATTAATGTTTTGCAGGCTGTTGATTTTAGAAGCAGCCAGAGCTTCATTCCACCTGCCATCAAGGT
AGTGTGCCCTAATTATTTGTAAGGATGGATGTTCTTCATTATTTAAAGTTTAAGAAACAATAATTAATTA
ATAAATATTTATGATTAATGATGATTAGGTATATGACGAGTTGTACCAAGCAGCAGTGAATGAGATCATA
GAGGTGATGACTTCTGTTTGCAAGACACACAATTTGCCATTAGCACTCACTTGGGCTCCTTGCATCCAAC
AAGGCAAGTGTGGTTGTGGGGTTTCATCTGAGAATTACATGTGGTGCGTCTCCACCGTGGATTCTGCGTG
CTTTGTTGGGGATCTAGACATATTGGGATTCCAAGAAGCGTGCTCTGAGTATCACCTTTTCCGGGGACAA
GGAATTGTTGGTACAGCCTTCACAACATCCAAACCGTGTTTCGCCATTGACATCACAGCCTTCAGCAAAG
CTGAATACCCTCTTGCTCACCATGCAAACATGTTCGGATTGCATGCAGCTGTGGCCATTCCACTCAGGAG
TGTCTACACCGGTTCAGCTGCTGATTTTGTTTTGGAGTTTTTCCTTCCAAAAGATTGCCATGACAGTGAA
GAGCAGAAGCAGTTGCTCAACTCATTGTCCATGGTGGTACAGCAAGCTTGCCGCAGCTTGCATGTGGTAC
TGGTGGAGGATGAATACACCTTGCCGATGCCATCACACACTAGTAAAGAGGAATTAGAAGAAGAAGAGAT
TACCATTACCAATAATCATGAGCAGAAATTATTTGTGTCTCCCTCCTCTCATGAATCAGAATGTTCAAAA
GAATCATCATGGATTGCACACATGATGGAGGCTCAGCAGAAGGGGAAAGGTGTGTCTGTGTCTTTGGAGT
ACTTGGAAGAACCAAAGGAGGAGTTCAAAGTAACAACAAACTGGGACAGCAGCACTGACCATGATCAGCA
GGCGCAGGTGTTTTCATCAGATTTTGGGCAAATGAGTTCAGGATTCAAAGCAAGTACTGTGGAGGGTGGG
GATCAAGAGTCTTCTTATACCTTTGGAAGCCGCCGCTCGTCTTCTGGTGGAAGAAAGTCAGGCGAGAAGA
GACGAACCAAGGCAGAGAAGACTATCAGCTTGCAAGTTCTAAGACAGTACTTTGCAGGAAGCCTAAAAGA
TGCAGCAAAGAGCATTGGTGGTGAGTGACATATCTTCTTGAATTCAACTCAACCATTCAATTAATTATTA
AATGATAACAAAGTTAATTTAGTGGGTGACTTAATTAAGAAAGTGATCCTTGTATGGTTGTACAGTTAAA
TGATGGTGTTTCCTTTTGATTTCTACAGTATGTCCCACAACTCTGAAAAGGATATGCAGACAGCATGGCA
TCACCAGGTGGCCTTCAAGGAAAATCAAGAAGGTTGGCCATTCTTTAAAAAAGCTTCAGCTGGTGATTGA
TTCAGTGCAGGGTGCTGAGGGTGCCATACAGATTGGCTCATTCTATGCCAGTTTTCCAGAGTTGAGCTCT
TCAGATTTCTCTGCCAGTTGCCGTTCTGATTCATCCAAGAAAATGCATAATTATCCTGATCAGAACAACA
CCTTGTATGGCCATGGAGATCATGGAGGAGTTGTTACTAGTTTAAAATCTCCACCCTCTGCTTGCAGCCA
AACTTTTGCAGGAAACCAACCATGCACCATCATCAACAATGGAGATGTTCTTATGACAGAAAGTCCTCCA
GTCCCTGAAGCATTGCTGAGTAGGAGAGATCACTGTGAGGAAGCAGAATTATTGAACAATGCATCTATCC
AAGAGGATACAAAGCGTTTCAGCAGACCCAAGAGCCAAACCCTACCTCCCTTGTCTGACAGCAGTGGCTG
GAACTCACTGGAAACAGGTGCTTTCAGAGTGAAAGCAACTTTTGCAGATGAGAAGATCCGCTTCAGCTTG
CAACCCATTTGGGGGTTCAGTGATTTGCAGCTAGAGATAGCAAGACGGTTCAATCTAAATGATGTGACCA
ACATCCTTCTCAAGTATCTGGATGATGATGGAGAGTGGGTAGTTTTAGCATGTGATGGTGATCTTGAGGA
GTGCAAAGACATACACAGATCATCTCAGAGCCGGACAATTAGACTCTCCCTTTTTCAAGCTTCGCCTCTA
AATCTAGCTAATACATTCCGCAATAGCAGCCCATCTTAACATAACACCAATTCTCTGCTTTTCTTGAGCT
TTAAGCCTCAAGAGAGAGGTGTGTTTGTTTGTGTATACTGTGTAGGATCCCAATCCCAATCCCATCCCAA
GCAAACATATACATTTAATTACTGGTTTTACTTGTTTGA"""

transcriptGenes = """CCCAAGCACTGCTTATTAATTACAAACCACCTTCTCATCTCTTGCTCTTCAACTTAGCACTAAACAGAAT
CTAGCTTCAAACCTAATTAAGGTACTTAATTGGATCAGCTAGCATGGAATATGGTTCATTACTAGTGCAG
CAGCAGCAGCAGCAGGATTGTAATTCTGCCTATGGGAGCTTGTCTAATTTATCATCAGACTGTGGATCAG
TGACAACAGCAGAAGCAGATCATCACATCATTGAGGAGCTGTTAGTACAAGGTTGCTGGGTGGAAGTTAG
TGGTGTTGGTGTTAGGGAGGGTGAGCTCCAGCTCCAACAAGACGAATCAAGTTTTGTGGTGGGGAAGAGA
TGGTGGATTGGACCAGCTGCAGCAGTAGCAGGATCATGTAATTCCTCTGTCAAAGAGAGACTAGTGATTG
CTGTTGGGTACTTGAAAGACTACACAAGAAACTCCAACGTGCTCATTCAGATATGGGTGCCCTTACGAAG
AGGCATCCTTCATGATCATGATTACCACACAAATTATTTACTTTCCAATAATCCTCCTCCTCAACCAGAA
GCAGCAGCAGATCATGAATCTGTTTCACTTGGTTTTCCCATGCCAGCAGCTCCCAACTCAAACTTATACT
CAAACGTGCACGTCCGTTTTTTTAGAAGCCACGAGTACCCGCGCGTTCAGGCTCAGCAGTATGGATCTTT
AGCCCTTCCTGTCTTCGAAAGAGGCACCGGGACATGCCTTGGTGTCCTTGAGATTGTAATCACCAACCAA
ACCACCATCAACTACAATGTCTCCAATGCTCTTGATCAGGCTGTTGATTTTAGAAGCAGCCAGAGCTTCA
TTCCACCTGCCATCAAGGTATATGACGAGTTGTACCAAGCAGCAGTGAATGAGATCATAGAGGTGATGAC
TTCTGTTTGCAAGACACACAATTTGCCATTAGCACTCACTTGGGCTCCTTGCATCCAACAAGGCAAGTGT
GGTTGTGGGGTTTCATCTGAGAATTACATGTGGTGCGTCTCCACCGTGGATTCTGCGTGCTTTGTTGGGG
ATCTAGACATATTGGGATTCCAAGAAGCGTGCTCTGAGTATCACCTTTTCCGGGGACAAGGAATTGTTGG
TACAGCCTTCACAACATCCAAACCGTGTTTCGCCATTGACATCACAGCCTTCAGCAAAGCTGAATACCCT
CTTGCTCACCATGCAAACATGTTCGGATTGCATGCAGCTGTGGCCATTCCACTCAGGAGTGTCTACACCG
GTTCAGCTGCTGATTTTGTTTTGGAGTTTTTCCTTCCAAAAGATTGCCATGACAGTGAAGAGCAGAAGCA
GTTGCTCAACTCATTGTCCATGGTGGTACAGCAAGCTTGCCGCAGCTTGCATGTGGTACTGGTGGAGGAT
GAATACACCTTGCCGATGCCATCACACACTAGTAAAGAGGAATTAGAAGAAGAAGAGATTACCATTACCA
ATAATCATGAGCAGAAATTATTTGTGTCTCCCTCCTCTCATGAATCAGAATGTTCAAAAGAATCATCATG
GATTGCACACATGATGGAGGCTCAGCAGAAGGGGAAAGGTGTGTCTGTGTCTTTGGAGTACTTGGAAGAA
CCAAAGGAGGAGTTCAAAGTAACAACAAACTGGGACAGCAGCACTGACCATGATCAGCAGGCGCAGGTGT
TTTCATCAGATTTTGGGCAAATGAGTTCAGGATTCAAAGCAAGTACTGTGGAGGGTGGGGATCAAGAGTC
TTCTTATACCTTTGGAAGCCGCCGCTCGTCTTCTGGTGGAAGAAAGTCAGGCGAGAAGAGACGAACCAAG
GCAGAGAAGACTATCAGCTTGCAAGTTCTAAGACAGTACTTTGCAGGAAGCCTAAAAGATGCAGCAAAGA
GCATTGGTGTATGTCCCACAACTCTGAAAAGGATATGCAGACAGCATGGCATCACCAGGTGGCCTTCAAG
GAAAATCAAGAAGGTTGGCCATTCTTTAAAAAAGCTTCAGCTGGTGATTGATTCAGTGCAGGGTGCTGAG
GGTGCCATACAGATTGGCTCATTCTATGCCAGTTTTCCAGAGTTGAGCTCTTCAGATTTCTCTGCCAGTT
GCCGTTCTGATTCATCCAAGAAAATGCATAATTATCCTGATCAGAACAACACCTTGTATGGCCATGGAGA
TCATGGAGGAGTTGTTACTAGTTTAAAATCTCCACCCTCTGCTTGCAGCCAAACTTTTGCAGGAAACCAA
CCATGCACCATCATCAACAATGGAGATGTTCTTATGACAGAAAGTCCTCCAGTCCCTGAAGCATTGCTGA
GTAGGAGAGATCACTGTGAGGAAGCAGAATTATTGAACAATGCATCTATCCAAGAGGATACAAAGCGTTT
CAGCAGACCCAAGAGCCAAACCCTACCTCCCTTGTCTGACAGCAGTGGCTGGAACTCACTGGAAACAGGT
GCTTTCAGAGTGAAAGCAACTTTTGCAGATGAGAAGATCCGCTTCAGCTTGCAACCCATTTGGGGGTTCA
GTGATTTGCAGCTAGAGATAGCAAGACGGTTCAATCTAAATGATGTGACCAACATCCTTCTCAAGTATCT
GGATGATGATGGAGAGTGGGTAGTTTTAGCATGTGATGGTGATCTTGAGGAGTGCAAAGACATACACAGA
TCATCTCAGAGCCGGACAATTAGACTCTCCCTTTTTCAAGCTTCGCCTCTAAATCTAGCTAATACATTCC
GCAATAGCAGCCCATCTTAACATAACACCAATTCTCTGCTTTTCTTGAGCTTTAAGCCTCAAGAGAGAGG
TGTGTTTGTTTGTGTATACTGTGTAGGATCCCAATCCCAATCCCATCCCAAGCAAACATATACATTTAAT
TACTGGTTTTACTTGTTTGAAAAAAAAAAAAAAAAAA"""

result1, result2 = NeedlemanWunschAlgorithm(genes, transcriptGenes)

# print the 2 sequences aligned 
# print(result1)
# print(result2)

def findIntronsExonsSeq(result1, result2):
    exonSequences = []
    intronSequences = []
    if len(result1) == len(result2):
        i = 0
        while i < len(result1):
            if result1[i] == result2[i]:

                # strings initialisation for the exon sequences
                exonSeq1 = ""
                exonSeq2 = ""
                
                # add the same consecutive nucleotides
                j = i
                while j < len(result1) and result1[j] == result2[j]:
                    exonSeq1 += result1[j]
                    exonSeq2 += result2[j]
                    j += 1
                
                # add the exon sequences to the list
                exonSequences.append((exonSeq1, exonSeq2))
                
                # skip the found sequence
                i = j
                
            else:
                intronSeq1 = ""
                intronSeq2 = ""

                j = i
                while j < len(result1) and result1[j] != result2[j]:
                    intronSeq1 += result1[j]
                    intronSeq2 += result2[j]
                    j += 1
                
                intronSequences.append((intronSeq1, intronSeq2))
                
                i = j
    
    return exonSequences, intronSequences
    
def printSequences(sequences, category):
    for seq1, seq2 in sequences:
        print(category + ":")
        print("Result1: " + seq1)
        print("Result2: " + seq2)
        print()

exons, introns = findIntronsExonsSeq(result1, result2)
print("Exons: ")
printSequences(exons, "Exon")
print("Introns: ")
printSequences(introns, "Intron")
